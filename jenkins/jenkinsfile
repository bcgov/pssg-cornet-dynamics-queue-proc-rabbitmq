  try {
     timeout(time: 20, unit: 'MINUTES') {
        node('sonar-dotnet') {

          // BUILD STAGE
            stage('Build') {
              openshift.withCluster() {
                openshift.withProject() {
                  env.NAMESPACE = openshift.project()
                  echo "Starting Pipeline for ${APP_NAME}..."
                  def bld = openshift.startBuild(env.APP_NAME)
                  bld.untilEach {
                    return (it.object().status.phase == "Complete")
                  }
                  bld.logs('-f')
                }
              }
            }

            // BUILD VERIFICATION STAGE
            stage ('Verify Build') {
                openshiftVerifyBuild(bldCfg: env.APP_NAME, namespace: env.BUILD)
            }

            stage("Checkout") {
              git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}", credentialsId: "${GIT_CREDENTIALS_ID}"
            }

            stage('Scan Codebase') {
              withSonarQubeEnv('cordyn-sonarqube') {
                    sh "dotnet sonarscanner begin /k:${APP_NAME} /d:sonar.host.url=$SONAR_HOST_URL /d:sonar.login=$SONAR_AUTH_TOKEN"
                    sh "dotnet build $PROJECT_SOLUTION"
                    sh "dotnet sonarscanner end /d:sonar.login=$SONAR_AUTH_TOKEN"
              }
            }

            // PROMOTE TO DEV
            stage('Promote to Dev') {
              openshift.withCluster() {
                openshift.withProject() {
                  openshift.tag("${APP_NAME}:latest", "${APP_NAME}:dev")
                  openshiftDeploy(deploymentConfig: env.APP_NAME, namespace: env.DEV)
                }
              }
            }

            // VERIFY DEV PROMOTION
            stage ('Verify Deployment to Dev') {
                openshiftVerifyDeployment(deploymentConfig: env.APP_NAME, namespace: env.DEV)
            }

            // MANUAL CHECK FOR PROMOTION TO TEST
            stage('Promotion gate') {
                script {
                  input message: 'Promote application to Test?'
                }
            }

            // PROMOTE FROM DEV TO TEST
            stage('Promote to Test') {
                openshift.withCluster() {
                  openshift.withProject() {
                    openshift.tag("${APP_NAME}:dev", "${APP_NAME}:test")
                    openshiftDeploy(deploymentConfig: env.APP_NAME, namespace: env.TEST)
                  }
                }
            }

            // VERIFY DEPLOYMENT TO TEST
            stage ('Verify Deployment to Test') {
                openshiftVerifyDeployment(deploymentConfig: env.APP_NAME, namespace: env.TEST)
            }

            // MANUAL CHECK FOR PROMOTION TO PRODUCTION
            stage('Promotion gate') {
                script {
                  input message: 'Promote application to Production?'
                }
            }

            // PROMOTE TO PRODUCTION
            stage('Promote to Prod') {
                openshift.withCluster() {
                  openshift.withProject() {
                    openshift.tag("${APP_NAME}:test", "${APP_NAME}:prod")
                    openshiftDeploy(deploymentConfig: env.APP_NAME, namespace: env.PROD)
                  }
                }
            }

            // MANUAL CHECK FOR PROMOTION TO PRODUCTION
            stage ('Verify Deployment to Prod') {
                openshiftVerifyDeployment(deploymentConfig: env.APP_NAME, namespace: env.PROD)
            }
          }
     }
  } catch (err) {
     echo "in catch block"
     echo "Caught: ${err}"
     currentBuild.result = 'FAILURE'
     throw err
  }
